name: Deploy Resources

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.9.5
        terraform_wrapper: false

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # - name: Set Executable Permission
    #   run: chmod +x ./tf/be_create.sh

    # - name: Run Backend Setup Script
    #   run: ./tf/be_create.sh
    #   shell: bash

    - name: Run script and set variable
      run: |
        RESOURCE_GROUP="tf-backend-rg"
        STORAGE_ACCOUNT="tfbackend$RANDOM"
        CONTAINER_NAME="tfstate"
        LOCATION="germanywestcentral"

        az group create --name $RESOURCE_GROUP --location $LOCATION

        az storage account create --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --location $LOCATION --sku Standard_LRS --encryption-services blob

        ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query '[0].value' --output tsv)

        az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT --account-key $ACCOUNT_KEY

        terraform -chdir=./tf init \
          -backend-config="storage_account_name=$STORAGE_ACCOUNT" \
          -backend-config="container_name=$CONTAINER_NAME" \
          -backend-config="resource_group_name=$RESOURCE_GROUP" \
          -backend-config="access_key=$ACCOUNT_KEY"

    - name: Terraform Validate
      run: terraform -chdir=./tf validate

    - name: Terraform Plan
      run: terraform -chdir=./tf plan

    - name: Terraform Apply
      run: terraform -chdir=./tf apply -auto-approve

    - name: Save outputs in env variables
      run: |
        cd tf
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
        echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_ENV
        echo "container_registry_name=$(terraform output -raw container_registry_name)" >> $GITHUB_ENV
  
    - name: Enable Routing Add-on with NGINX
      run: |
        az aks approuting enable --resource-group $resource_group_name --name $aks_cluster_name
    
    - name: Set up kubectl for AKS
      run: |
        az aks get-credentials --resource-group $resource_group_name --name $aks_cluster_name

    - name: Log in to Azure Container Registry
      run: |
        az acr login -n $container_registry_name

    - name: Build Docker Image
      run: docker build -t $container_registry_name.azurecr.io/my-app .

    - name: Push Docker Image to ACR
      run: |
        docker push $container_registry_name.azurecr.io/my-app
      
    - name: Deploy to Kubernetes
      run: |
        ACR_NAME=$container_registry_name envsubst < deployment.yaml | kubectl apply -f -
        kubectl apply -f ingress.yaml
        kubectl rollout status deployment my-app || kubectl rollout undo deployment my-app

    - name: Get IP of Ingress
      run: |
        kubectl get service -n app-routing-system nginx -o jsonpath="{.status.loadBalancer.ingress[0].ip}"